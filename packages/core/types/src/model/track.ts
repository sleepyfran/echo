import type { Artist } from "./artist";
import type { Album } from "./album";
import { Brand } from "effect";
import type {
  ApiBasedProviderId,
  FileBasedProviderId,
} from "./provider-metadata";
import type { FileId } from "./file-system";

/**
 * Wrapper around a string to represent a track id.
 */
export type TrackId = string & Brand.Brand<"TrackId">;
export const TrackId = Brand.nominal<TrackId>();

/**
 * Represents how a resource can be consumed.
 */
export type StreamingResource =
  | { type: "file"; provider: FileBasedProviderId; fileId: FileId }
  | { type: "api"; provider: ApiBasedProviderId };

/**
 * Represents a playable track in the user's library.
 */
export type Track = {
  /**
   * Unique identifier for the track, either provided by a third-party (when
   * syncing against API-based services) or generated by the application. If the
   * ID is from a third-party, the first three characters of the service name
   * followed by a colon are prepended to the ID. Example: `spo:id` for an ID
   * generated by the Spotify API.
   */
  id: TrackId;

  /**
   * Main artist that created the track.
   */
  mainArtist: Artist;

  /**
   * List of artists that contributed to the track but are not the main
   * artist. This can include featured artists, producers, and other contributors.
   * The main artist is not included in this list.
   */
  secondaryArtists: Artist[];

  /**
   * Album that the track belongs to.
   */
  albumInfo: Album;

  /**
   * Name of the track.
   */
  name: string;

  /**
   * Number of the track inside of the album it belongs to. This is used to
   * determine the order of tracks in an album. It must be greater than zero.
   */
  trackNumber: number;

  /**
   * Resource that the track can be consumed from, with details on how to
   * consume and from which platform.
   */
  resource: StreamingResource;

  /**
   * Duration of the track in milliseconds. It must be greater than zero.
   * TODO: We would need to download the entire track to get this information. Consider re-adding this field when we have a way to get this information.
   */
  // durationInMilliseconds: number,
};
